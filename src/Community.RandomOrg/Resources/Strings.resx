<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="client.api_key.invalid_format" xml:space="preserve">
    <value>The format of API key is invalid</value>
  </data>
  <data name="client.verify.license.type.not_specified" xml:space="preserve">
    <value>The license type is null</value>
  </data>
  <data name="client.verify.data.not_specified" xml:space="preserve">
    <value>The random data is null</value>
  </data>
  <data name="client.verify.random.invalid_type" xml:space="preserve">
    <value>The random type is invalid</value>
  </data>
  <data name="protocol.http.headers.invalid_values" xml:space="preserve">
    <value>The HTTP response has invalid JSON-RPC transport headers</value>
  </data>
  <data name="protocol.http.status_code.invalid_value" xml:space="preserve">
    <value>The HTTP response status code does not indicate a successful service response</value>
  </data>
  <data name="protocol.random.api_key_status.invalid_value" xml:space="preserve">
    <value>The value for the API key status is invalid</value>
  </data>
  <data name="protocol.random.message.invalid_value" xml:space="preserve">
    <value>The RANDOM.ORG response is invalid</value>
  </data>
  <data name="protocol.rpc.message.invalid_value" xml:space="preserve">
    <value>The JSON-RPC response is invalid</value>
  </data>
  <data name="random.blob.count.invalid_range" xml:space="preserve">
    <value>The count must be within the [1,100] range</value>
  </data>
  <data name="random.blob.size.invalid_range" xml:space="preserve">
    <value>The size of each blob must be within the [1,131072] range</value>
  </data>
  <data name="random.blob.invalid_total_size" xml:space="preserve">
    <value>The total size of all blobs must not exceed 131072 bytes</value>
  </data>
  <data name="random.decimal_fraction.count.invalid_range" xml:space="preserve">
    <value>The count must be within the [1,10000] range</value>
  </data>
  <data name="random.decimal_fraction.decimal_places.invalid_range" xml:space="preserve">
    <value>The number of decimal places must be within the [1,20] range</value>
  </data>
  <data name="random.gaussian.count.invalid_range" xml:space="preserve">
    <value>The count must be within the [1,10000] range</value>
  </data>
  <data name="random.gaussian.mean.invalid_range" xml:space="preserve">
    <value>The distribution's mean must be within the [-1000000,1000000] range</value>
  </data>
  <data name="random.gaussian.significant_digits.invalid_range" xml:space="preserve">
    <value>The number of significant digits must be within the [2,20] range</value>
  </data>
  <data name="random.gaussian.standard_deviation.invalid_range" xml:space="preserve">
    <value>The distribution's standard deviation must be within the [-1000000,1000000] range</value>
  </data>
  <data name="random.integer.count.invalid_range" xml:space="preserve">
    <value>The count must be within the [1,10000] range</value>
  </data>
  <data name="random.integer.lower_boundary.invalid_range" xml:space="preserve">
    <value>The lower boundary must be within the [-1000000000,1000000000] range</value>
  </data>
  <data name="random.integer.upper_boundary.invalid_range" xml:space="preserve">
    <value>The upper boundary must be within the [-1000000000,1000000000] range</value>
  </data>
  <data name="random.sequence.arguments.different_size" xml:space="preserve">
    <value>The dimensions of the specified collections are different</value>
  </data>
  <data name="random.sequence.count.invalid_range" xml:space="preserve">
    <value>The count of sequences must be within the [1,1000] range</value>
  </data>
  <data name="random.sequence.maximums.not_specified" xml:space="preserve">
    <value>The maximums collection is null</value>
  </data>
  <data name="random.sequence.minimums.not_specified" xml:space="preserve">
    <value>The minimums collection is null</value>
  </data>
  <data name="random.sequence.replacements.not_specified" xml:space="preserve">
    <value>The replacements collection is null</value>
  </data>
  <data name="random.sequence.sequence.not_specified" xml:space="preserve">
    <value>The sequences collection contains null value</value>
  </data>
  <data name="random.sequence.total.invalid_range" xml:space="preserve">
    <value>The total count must be within the [1,10000] range</value>
  </data>
  <data name="random.string.characters.length.invalid_range" xml:space="preserve">
    <value>The number of characters must be within the [1,80] range</value>
  </data>
  <data name="random.string.characters.not_specified" xml:space="preserve">
    <value>The set of characters is null</value>
  </data>
  <data name="random.string.count.invalid_range" xml:space="preserve">
    <value>The count must be within the [1,10000] range</value>
  </data>
  <data name="random.string.length.invalid_range" xml:space="preserve">
    <value>The length of each string must be within the [1,20] range</value>
  </data>
  <data name="random.user_data.length.invalid_range" xml:space="preserve">
    <value>The length of user data string must be within the [1,1000] range</value>
  </data>
  <data name="random.uuid.count.invalid_range" xml:space="preserve">
    <value>The count must be within the [1,1000] range</value>
  </data>
</root>