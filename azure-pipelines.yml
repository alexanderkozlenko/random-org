# Â© Alexander Kozlenko. Licensed under the MIT License.

variables:
- name: 'Build.ProjectPath'
  value: '$(Build.SourcesDirectory)/global.proj'
- name: 'Build.Configuration'
  value: 'Release'
stages:
- stage: Build
  jobs:
  - job: Default
    steps:
    - template: azure-pipelines-sdk.yml
    - task: DotNetCoreCLI@2
      displayName: 'dotnet.build'
      inputs:
        command: custom
        custom: build
        arguments: '$(Build.ProjectPath) -c $(Build.Configuration) -p:ContinuousIntegrationBuild=true -p:BuildNumber=$(Build.BuildNumber)'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet.pack'
      inputs:
        command: custom
        custom: pack
        arguments: '$(Build.ProjectPath) -c $(Build.Configuration) -p:ContinuousIntegrationBuild=true -p:BuildNumber=$(Build.BuildNumber) --no-build --include-symbols -o $(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@0
      displayName: 'pipeline.artifacts.publish'
      inputs:
        artifactName: 'artifact'
        targetPath: '$(Build.ArtifactStagingDirectory)'
- stage: Test
  jobs:
  - job: Default
    steps:
    - template: azure-pipelines-sdk.yml
    - task: DotNetCoreCLI@2
      displayName: 'dotnet.build'
      inputs:
        command: custom
        custom: build
        arguments: '$(Build.ProjectPath) -c $(Build.Configuration) -p:ContinuousIntegrationBuild=true -p:BuildNumber=$(Build.BuildNumber)'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet.test'
      inputs:
        command: custom
        custom: test
        arguments: '$(Build.ProjectPath) -c $(Build.Configuration) -p:ContinuousIntegrationBuild=true -p:BuildNumber=$(Build.BuildNumber) --no-build -l trx -r $(Agent.TempDirectory)'
    - task: PublishTestResults@2
      displayName: 'pipeline.reports.publish'
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        searchFolder: '$(Agent.TempDirectory)'
- stage: Publish
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Default
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@1
      displayName: 'pipeline.artifacts.download'
      inputs:
        artifactName: 'artifact'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: NuGetToolInstaller@1
      displayName: 'nuget.use'
      inputs:
        versionSpec: '$(System.NuGet.Version)'
    - task: NuGetCommand@2
      displayName: 'nuget.artifacts.publish'
      inputs:
        command: push
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: '$(System.ServiceConnection.NuGet.Staging)'
